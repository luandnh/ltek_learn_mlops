name: CI MLflow Flask API - Train + Build + Deploy

on:
  push:
    tags:
      - "*"

env:
  TARGET_BRANCH: ${{ github.ref_name }}
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/mlflow-flask-api
  MLFLOW_UI_FOLDER: /home/ltek/projects/mlflow-ui

jobs:
  build_and_test:
    name: 🥪 Build & Lint Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Python dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint and basic test
        run: |
          python -m py_compile app.py

  train_and_log_model:
    name: 🧠 Train & Log MLflow Model
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install training dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Extract tag and set ENVIRONMENT
        id: env_tag
        run: |
          TAG_NAME=${GITHUB_REF##*/}
          ENVIRONMENT="PROD"
          if [[ "$TAG_NAME" == *dev* ]]; then
            ENVIRONMENT="DEV"
          elif [[ "$TAG_NAME" == *staging* ]]; then
            ENVIRONMENT="STAGING"
          elif [[ "$TAG_NAME" == *fix* ]]; then
            ENVIRONMENT="FIX"
          fi
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

      - name: Run training and log to MLflow
        run: python train_and_log.py
        env:
          ENVIRONMENT: ${{ env.ENVIRONMENT }}

      - name: Upload model comparison results
        uses: actions/upload-artifact@v4
        with:
          name: model-results
          path: |
            model_comparison_results.json
            model_comparison_results.csv
            training.log

      - name: Upload mlruns logs
        uses: actions/upload-artifact@v4
        with:
          name: mlruns-logs
          path: mlruns/

  setup_build_env:
    name: ⚙️ Setup Build Environment
    runs-on: ubuntu-latest
    needs: train_and_log_model
    outputs:
      gh_branch_name: ${{ steps.set_env.outputs.TARGET_BRANCH }}
      gh_buildx_driver: ${{ steps.set_env.outputs.BUILDX_DRIVER }}
      gh_buildx_version: ${{ steps.set_env.outputs.BUILDX_VERSION }}
      gh_buildx_platforms: ${{ steps.set_env.outputs.BUILDX_PLATFORMS }}
    steps:
      - id: set_env
        name: Set Docker Build Variables
        run: |
          echo "BUILDX_DRIVER=docker-container" >> $GITHUB_OUTPUT
          echo "BUILDX_VERSION=latest" >> $GITHUB_OUTPUT
          echo "BUILDX_PLATFORMS=linux/amd64" >> $GITHUB_OUTPUT
          echo "TARGET_BRANCH=${{ github.ref_name }}" >> $GITHUB_OUTPUT

  build_and_push:
    name: 🛠️ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: setup_build_env
    env:
      BRANCH_TAG: dev
      TARGET_BRANCH: ${{ needs.setup_build_env.outputs.gh_branch_name }}
      BUILDX_DRIVER: ${{ needs.setup_build_env.outputs.gh_buildx_driver }}
      BUILDX_VERSION: ${{ needs.setup_build_env.outputs.gh_buildx_version }}
      BUILDX_PLATFORMS: ${{ needs.setup_build_env.outputs.gh_buildx_platforms }}
    steps:
      - name: Extract tag name
        run: echo "APP_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Download mlruns logs
        uses: actions/download-artifact@v4
        with:
          name: mlruns-logs
          path: mlruns

      - name: Set Docker Tag
        run: |
          BRANCH_TAG="bugs"
          if [[ "${APP_VERSION}" == *dev* ]]; then
            BRANCH_TAG="dev"
          elif [[ "${APP_VERSION}" == *staging* ]]; then
            BRANCH_TAG="staging"
          elif [[ "${APP_VERSION}" == *fix* ]]; then
            BRANCH_TAG="fix"
          fi
          VERSION_TAG=$(echo "${APP_VERSION}" | sed -E 's/-[a-zA-Z0-9]+$//')
          IMAGE_TAG="${BRANCH_TAG}-${VERSION_TAG}"
          echo "BRANCH_TAG=${BRANCH_TAG}" >> $GITHUB_ENV
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: ${{ env.BUILDX_DRIVER }}
          version: ${{ env.BUILDX_VERSION }}

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=${{ env.BRANCH_TAG }}-latest,enable=true
            type=raw,value=${{ env.IMAGE_TAG }},enable=true
            type=raw,value=${{ env.BRANCH_TAG }}-{{ date 'X' }},enable=true

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ env.BUILDX_PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            APP_VERSION=${{ env.APP_VERSION }}

      - name: Notify via Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            🚀 *MLflow Flask API Deployed*
            🔹 Repo: [${{ github.repository }}](https://github.com/${{ github.repository }})
            🔹 Tag: `${{ env.APP_VERSION }}`
            🔹 Image: `${{ env.IMAGE_TAG }}`
            🔹 [CI Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

  deploy_mlflow_ui:
    name: 🚀 Deploy MLflow UI
    runs-on: self-hosted
    needs: build_and_push
    if: github.ref_type == 'tag' && contains(github.ref, 'dev')
    env:
      MLFLOW_UI_FOLDER: /home/ltek/projects/mlflow-ui
    steps:
      - uses: actions/checkout@v4

      - name: Sync mlruns from artifact
        run: |
          cp -Rf scripts ${{ env.MLFLOW_UI_FOLDER }}
          cd ${{ env.MLFLOW_UI_FOLDER }}
          chmod +x ./scripts/sync_mlruns_artifact.sh
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} ./scripts/sync_mlruns_artifact.sh ${{ github.run_id }}

  deploy_dev:
    name: 🚀 Deploy to Dev
    runs-on: self-hosted
    needs: build_and_push
    if: github.ref_type == 'tag' && contains(github.ref, 'dev')
    env:
      BRANCH_TAG: dev
      PROJECT_FOLDER: /home/ltek/projects/mlflow-flask-api-dev
    steps:
      - uses: actions/checkout@v4

      - name: Download model comparison results
        uses: actions/download-artifact@v4
        with:
          name: model-results
          path: model_results

      - name: Display best model info from JSON
        run: |
          echo "📊 Model Comparison Summary:"
          cat model_results/model_comparison_results.json | jq '.best_model' || echo "⚠️ Failed to read best_model"

      - name: Copy model comparison results
        run: |
          cp -Rf model_results ${{ env.PROJECT_FOLDER }}

      - name: Extract tag and version
        run: |
          TAG_NAME=${GITHUB_REF##*/}
          echo "IMAGE_TAG=${{ env.BRANCH_TAG }}-${TAG_NAME}" >> $GITHUB_ENV

      - name: Deploy with Docker Compose
        run: |
          cd ${{ env.PROJECT_FOLDER }}
          API_VERSION=${{ env.IMAGE_TAG }} docker compose pull && docker compose up -d

      - name: Telegram Notify
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            🚀 *DEV Deployed*
            🔹 Tag: `${{ github.ref_name }}`
            🔹 Version: `${{ env.IMAGE_TAG }}`
            🔹 [CI Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

  deploy_staging:
    name: 🚀 Deploy to Staging
    runs-on: self-hosted
    needs: build_and_push
    if: github.ref_type == 'tag' && contains(github.ref, 'staging')
    env:
      BRANCH_TAG: staging
      PROJECT_FOLDER: /home/ltek/projects/mlflow-flask-api-staging
    steps:
      - uses: actions/checkout@v4

      - name: Download model comparison results
        uses: actions/download-artifact@v4
        with:
          name: model-results
          path: model_results

      - name: Display best model info from JSON
        run: |
          echo "📊 Model Comparison Summary:"
          cat model_results/model_comparison_results.json | jq '.best_model' || echo "⚠️ Failed to read best_model"

      - name: Copy model comparison results
        run: |
          cp -Rf model_results ${{ env.PROJECT_FOLDER }}

      - name: Extract tag and version
        run: |
          TAG_NAME=${GITHUB_REF##*/}
          echo "IMAGE_TAG=${{ env.BRANCH_TAG }}-${TAG_NAME}" >> $GITHUB_ENV

      - name: Deploy with Docker Compose
        run: |
          cd ${{ env.PROJECT_FOLDER }}
          API_VERSION=${{ env.IMAGE_TAG }} docker compose pull && docker compose up -d

      - name: Telegram Notify
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            🚀 *STAGING Deployed*
            🔹 Tag: `${{ github.ref_name }}`
            🔹 Version: `${{ env.IMAGE_TAG }}`
            🔹 [CI Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

  deploy_production:
    name: 🚀 Deploy to Production
    runs-on: self-hosted
    needs: build_and_push
    if: github.ref_type == 'tag' && contains(github.ref, 'prod')
    env:
      BRANCH_TAG: prod
      PROJECT_FOLDER: /home/ltek/projects/mlflow-flask-api-prod
    steps:
      - uses: actions/checkout@v4

      - name: Download model comparison results
        uses: actions/download-artifact@v4
        with:
          name: model-results
          path: model_results

      - name: Display best model info from JSON
        run: |
          echo "📊 Model Comparison Summary:"
          cat model_results/model_comparison_results.json | jq '.best_model' || echo "⚠️ Failed to read best_model"

      - name: Copy model comparison results
        run: |
          cp -Rf model_results ${{ env.PROJECT_FOLDER }}

      - name: Extract tag and version
        run: |
          TAG_NAME=${GITHUB_REF##*/}
          echo "IMAGE_TAG=${{ env.BRANCH_TAG }}-${TAG_NAME}" >> $GITHUB_ENV

      - name: Deploy with Docker Compose
        run: |
          cd ${{ env.PROJECT_FOLDER }}
          API_VERSION=${{ env.IMAGE_TAG }} docker compose pull && docker compose up -d

      - name: Telegram Notify
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            🚀 *PRODUCTION Deployed*
            🔹 Tag: `${{ github.ref_name }}`
            🔹 Version: `${{ env.IMAGE_TAG }}`
            🔹 [CI Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
